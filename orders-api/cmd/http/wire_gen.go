// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/sysradium/petproject/orders-api/internal/adapters/ephemeral"
	"github.com/sysradium/petproject/orders-api/internal/app"
	"github.com/sysradium/petproject/orders-api/internal/app/server"
	"github.com/sysradium/petproject/orders-api/internal/ports"
	"github.com/sysradium/petproject/orders-api/internal/providers"
	"github.com/sysradium/petproject/users-api/proto/users/v1"
)

// Injectors from wire.go:

func Initialize(addr providers.GrpcConnString, kafkaAddr providers.KafkaAddress) (*server.Server, func(), error) {
	echo := providers.NewEcho()
	clientConn, cleanup, err := providers.NewGrpcClient(addr)
	if err != nil {
		return nil, nil, err
	}
	usersServiceClient := usersv1.NewUsersServiceClient(clientConn)
	ephemeralEphemeral := ephemeral.New()
	router, err := providers.NewRouter()
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	loggerAdapter := providers.NewLogger()
	v := providers.NewEventHandlers()
	eventBus, err := providers.NewCQRSFacade(kafkaAddr, router, loggerAdapter, v)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	appApp := app.NewApplication(ephemeralEphemeral, eventBus)
	httpServer := ports.NewHttpServer(usersServiceClient, appApp)
	serverServer := server.New(echo, httpServer, router)
	return serverServer, func() {
		cleanup()
	}, nil
}
