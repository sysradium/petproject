// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"fmt"
	middleware2 "github.com/deepmap/oapi-codegen/pkg/middleware"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/labstack/echo/v4/middleware"
	"github.com/labstack/gommon/log"
	"github.com/sysradium/petproject/orders-api/api"
	"github.com/sysradium/petproject/orders-api/internal/app"
	"github.com/sysradium/petproject/orders-api/internal/handler"
	"github.com/sysradium/petproject/users-api/proto/users/v1"
	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials/insecure"
	"os"
)

// Injectors from wire.go:

func Initialize(addr string) (*app.App, func(), error) {
	echo := NewEcho()
	clientConn, cleanup, err := newGrpcClient(addr)
	if err != nil {
		return nil, nil, err
	}
	usersServiceClient := usersv1.NewUsersServiceClient(clientConn)
	handlerHandler := handler.New(usersServiceClient)
	appApp := app.New(echo, handlerHandler)
	return appApp, func() {
		cleanup()
	}, nil
}

// wire.go:

func newGrpcClient(addr string) (*grpc.ClientConn, func(), error) {
	opts := []grpc.DialOption{grpc.WithTransportCredentials(insecure.NewCredentials())}

	conn, err := grpc.Dial(addr, opts...)
	cleanup := func() {
		conn.Close()
	}
	return conn, cleanup, err
}

func NewEcho() *echo.Echo {
	e := echo.New()
	e.HideBanner = true
	e.Logger.SetLevel(log.DEBUG)

	swagger, err := api.GetSwagger()
	if err != nil {
		fmt.Fprintf(os.Stderr, "Error loading swagger spec\n: %s", err)
		os.Exit(1)
	}

	swagger.Servers = openapi3.Servers{
		{URL: "/v1"},
	}

	e.Use(middleware.Logger(), middleware2.OapiRequestValidator(swagger))

	return e
}
